import sys
import os

import yaml

"""
Class used to get parameters from
a configuration file using yaml syntax.
"""
class ConfigHandler(object):
    
    def __init__(self, config_file):
        """
        Constructor
        Parameters
        ----------
        config_file: configuration file (yaml format)
        """
        #self._config_file = config_file
        #with open(_config_file,'r') as stream:
        with open(config_file,'r') as stream:
            self.cfg = yaml.load(stream)

    def getValue(self, param1, param2=None, param3=None):
        """
        Function to get value of variable
        Parameters
        ----------
        param1: section's name
        param2: variable's name or subsection name
        param3: variable's name
        Returns
        -------
        Value parameter (string, float...)
        """
        if param3==None and param2==None:
            return self.cfg[param1]
        elif param3==None:
            return self.cfg[param1][param2]
        else:
            return self.cfg[param1][param2][param3]

        
def warning(string):
    """
    Print warning
    Parameters
    ----------
    string: string to be printed
    """
    WARNINGCOLOR = "\033[31;01m"
    RESETCOLOR = "\033[0m"
    print(WARNINGCOLOR + "WARNING> " + RESETCOLOR + string)
    
def info(string):
    """
    Print warning
    Parameters
    ----------
    string: string to be printed
    """
    INFOCOLOR = "\033[32;01m"
    RESETCOLOR = "\033[0m"
    print(INFOCOLOR + "INFO> " + RESETCOLOR + string)
        
import gammalib
import ctools

def dealWithModelFile(cfg):
    """
    Import infos from configuration file and create a model file
    for the analysis
    """
    # Create model container
    models = gammalib.GModels()

    # coordinates
    src_dir = gammalib.GSkyDir()
    src_dir.radec_deg(cfg.getValue('model','coords','ra'),
                      cfg.getValue('model','coords','dec'))

    # spatial model
    spatial = None
    spectral = None
    opt_spatial = cfg.getValue('model','spatial')
    if opt_spatial == 'plike':
        spatial = gammalib.GModelSpatialPointSource(src_dir)
        spatial['RA'].min(-360.)
        spatial['RA'].max(360.)
        spatial['DEC'].min(-90.)
        spatial['DEC'].max(90.)
        if cfg.getValue('model','coords','fitposition') == True:
            spatial['RA'].free()
            spatial['DEC'].free()
        
    else: ## TODO
        pass

    # spectral model
    opt_spectral = cfg.getValue('model','spectral')
    if opt_spectral == 'pwl':
        spectral = gammalib.GModelSpectralPlaw()
        #print(spectral)
        ### fix prefactor
        prefactor = cfg.getValue('model','pwl','prefactor')
        spectral['Prefactor'].value(prefactor*1.e-17)
        #print(spectral)
        spectral['Prefactor'].min(1.e-24)
        spectral['Prefactor'].max(1.e-14)
        spectral['Prefactor'].scale(1.e-17)
        ### fix scale
        scale = cfg.getValue('model','pwl','scale')
        spectral['PivotEnergy'].value(scale*1.e6)
        spectral['PivotEnergy'].scale(1.e6)
        spectral['PivotEnergy'].min(1.e4)
        spectral['PivotEnergy'].max(1.e9)
        ### fix index
        index = cfg.getValue('model','pwl','index')
        #print index
        #print(spectral)
        spectral['Index'].value(index)
        spectral['Index'].scale(-1.)
        spectral['Index'].min(-0)
        spectral['Index'].max(-5)
    else: ## TODO
        pass

    model = gammalib.GModelSky(spatial, spectral)
    models.append(model)

    models.save(cfg.getValue('model','output'))
    #print(models)
    del models

def handleData(cfg):
    warning('Skipping this part for the moment!')
    
def selectData(cfg):
    """
    Select data with ctselect
    """
    select = ctools.ctselect()
    select["inobs"] = cfg.getValue('csiactobs','obs_output')
    select["outobs"] = cfg.getValue('ctselect','output')
    select["ra"] = cfg.getValue('model','coords','ra')
    select["dec"] = cfg.getValue('model','coords','dec')
    select["rad"] = cfg.getValue('ctselect','radius')
    select["emin"] = cfg.getValue('ctselect','emin')
    select["emax"] = cfg.getValue('ctselect','emax')
    select["tmin"] = cfg.getValue('ctselect','tmin')
    select["tmax"] = cfg.getValue('ctselect','tmax')
    select["usethres"] = cfg.getValue('ctselect','usethres')
    #select["prefix"] = 'selected/selected_'
    select["debug"]    = True 
    select.run()
    select.save()

def binData(cfg):
    """
    bin data with ctbin
    """
    if cfg.getValue('general','anatype') == 'binned':
        bdata = ctools.ctbin()
        bdata["inobs"] = cfg.getValue('ctselect','output')
        bdata["outcube"] = cfg.getValue('ctbin','output')
        bdata["ebinalg"]  = "LOG"
        bdata["emin"]     = cfg.getValue('ctselect','emin')
        bdata["emax"]     = cfg.getValue('ctselect','emax')
        bdata["enumbins"] = cfg.getValue('ctbin','enumbins')
        bdata["nxpix"]    = cfg.getValue('ctbin','nxpix')
        bdata["nypix"]    = cfg.getValue('ctbin','nypix')
        bdata["binsz"]    = cfg.getValue('ctbin','binsz')
        bdata["coordsys"] = "CEL"
        bdata["proj"]     = "AIT"
        bdata["xref"]     = cfg.getValue('model','coords','ra')
        bdata["yref"]     = cfg.getValue('model','coords','dec')
        bdata["debug"]    = True 
        bdata.run()
        bdata.save()

def makeCubes(cfg):
    """
    makes exposure, psf and bkg cubes
    """
    if cfg.getValue('general','anatype') == 'binned':
        ### create exposure map
        expcube = ctools.ctexpcube()
        expcube["inobs"] = cfg.getValue('ctselect','output')
        expcube["incube"] = cfg.getValue('ctbin','output')
        expcube["outcube"] = cfg.getValue('ctexpcube','output')
        if cfg.getValue('general','edisp'): 
            like["edisp"]   = True
        
        expcube.run()
        expcube.save()
        
        ### create exposure map
        psfcube = ctools.ctpsfcube()
        psfcube["inobs"]   = cfg.getValue('ctselect','output')
        psfcube["incube"]   = cfg.getValue('ctbin','output')
        psfcube["outcube"]   = cfg.getValue('ctpsfcube','output')
        if cfg.getValue('general','edisp'): 
            like["edisp"]   = True
        
        psfcube.run()
        psfcube.save()
        
        ### create background cube
        bkgcube = ctools.ctbkgcube()
        bkgcube["inobs"]   = cfg.getValue('ctselect','output')
        bkgcube["inmodel"]   = cfg.getValue('csiactobs','model_output')
        bkgcube["incube"]   = cfg.getValue('ctbin','output')
        bkgcube["outcube"]   = cfg.getValue('ctbkgcube','output_cube')
        bkgcube["outmodel"]   = cfg.getValue('ctbkgcube','output_model')
        bkgcube["debug"]    = True
        bkgcube["chatter"]    = 4
        bkgcube.run()
        bkgcube.save()    

def makeFit(cfg):
    """
    makes fit with ctlike
    """
    # Perform maximum likelihood fitting
    like = ctools.ctlike()
    if cfg.getValue('general','anatype') == 'unbinned':
        like["inobs"] = cfg.getValue('ctselect','output')
        like["inmodel"] = cfg.getValue('csiactobs','model_output')
    elif cfg.getValue('general','anatype') == 'unbinned':
        like["inobs"] = cfg.getValue('ctbin','output')
        like["inmodel"] = cfg.getValue('ctbkgcube','output_model')
        like["expcube"]   = cfg.getValue('ctexpcube','output')
        like["psfcube"]   = cfg.getValue('ctpsfcube','output')
        like["bkgcube"]   = cfg.getValue('ctbkgcube','output_cube')
    else:
        warning('Unlnown type: {}'.format(cfg.getValue('general','anatype')))
        sys.exit()
        
    if cfg.getValue('general','edisp'): 
        like["edisp"]   = True
    else:
        like["edisp"]   = False
        
    like["outmodel"] = cfg.getValue('ctlike','output')
    like["chatter"] = 1
    like["debug"]    = True 
    print like.log_filename()
    like.run()
    like.save()  

import cscripts

try:
    import matplotlib.pyplot as plt
    has_matplotlib = True
except:
    has_matplotlib = False
    
def makeSpectralPoints(cfg):
    """
    Computes spectrum
    """
    
    spec = cscripts.csspec()
    if cfg.getValue('general','anatype') == 'unbinned':
        spec["inobs"] = cfg.getValue('ctselect','output')
        spec["inmodel"] = cfg.getValue('ctlike','output')
    elif cfg.getValue('general','anatype') == 'unbinned':
        spec["inobs"] = cfg.getValue('ctbin','output')
        spec["inmodel"] = cfg.getValue('ctlike','output')
        spec["expcube"]   = cfg.getValue('ctexpcube','output')
        spec["psfcube"]   = cfg.getValue('ctpsfcube','output')
        spec["bkgcube"]   = cfg.getValue('ctbkgcube','output_cube')
    else:
        warning('Unlnown type: {}'.format(cfg.getValue('general','anatype')))
        sys.exit()
        
    spec["outfile"] = cfg.getValue('csspec','output')
    spec["emin"] = cfg.getValue('csspec','emin')
    spec["emax"] = cfg.getValue('csspec','emax')
    spec["enumbins"] = cfg.getValue('csspec','enumbins')
    spec["srcname"] = ""
    spec["ebinalg"] = "LOG"
    if cfg.getValue('general','edisp'): 
        spec["edisp"]   = True
    else:
        spec["edisp"]   = True

    spec["debug"]    = True

    #spec.run()
    spec.execute()  

    ### make copy of spectrum
    spectrum = spec.spectrum().copy()
    return spectrum

def makeButterfly(cfg):
    """
    Computes butterfly (only for power law, fix in the future?)
    """
    butt = ctools.ctbutterfly()
    if cfg.getValue('general','anatype') == 'unbinned':
        butt["inobs"] = cfg.getValue('ctselect','output')
        butt["inmodel"] = cfg.getValue('ctlike','output')
    elif cfg.getValue('general','anatype') == 'unbinned':
        butt["inobs"] = cfg.getValue('ctbin','output')
        butt["inmodel"] = cfg.getValue('ctlike','output')
        butt["expcube"]   = cfg.getValue('ctexpcube','output')
        butt["psfcube"]   = cfg.getValue('ctpsfcube','output')
        butt["bkgcube"]   = cfg.getValue('ctbkgcube','output_cube')
    else:
        warning('Unlnown type: {}'.format(cfg.getValue('general','anatype')))
        sys.exit()
        
    butt["outfile"] = cfg.getValue('ctbutterfly','output')
    butt["emin"] = cfg.getValue('csspec','emin')
    butt["emax"] = cfg.getValue('csspec','emax')
    butt["enumbins"] = 100
    butt["srcname"] = ""
    butt["ebinalg"] = "LOG"
    if cfg.getValue('general','edisp'): 
        butt["edisp"]   = True
    else:
        butt["edisp"]   = True

    butt["debug"]    = True
    
    butt.run()
    butt.save()  

def showSpectrum(cfg):
    """
    Generate spectrum (points + butterfly)
    """
    spectrum = makeSpectralPoints(cfg)
    
    #################################################################
    ### Taken from $CTOOLS/share/examples/python/make_spectrum.py ###
    #################################################################
    # Read spectrum file    
    table    = spectrum.table(1)
    c_energy = table["Energy"]
    c_ed     = table["ed_Energy"]
    c_eu     = table["eu_Energy"]
    c_flux   = table["Flux"]
    c_eflux  = table["e_Flux"]
    c_ts     = table["TS"]
    c_upper  = table["UpperLimit"]

    # Initialise arrays to be filled
    energies    = []
    flux        = []
    ed_engs     = []
    eu_engs     = []
    e_flux      = []
    ul_energies = []
    ul_ed_engs  = []
    ul_eu_engs  = []
    ul_flux     = []

    # Loop over rows of the file
    nrows = table.nrows()
    for row in range(nrows):

        # Get TS
        ts    = c_ts.real(row)
        flx   = c_flux.real(row)
        e_flx = c_eflux.real(row)

        # Switch
        if ts > 9.0 and e_flx < flx:

            # Add information
            energies.append(c_energy.real(row))
            flux.append(c_flux.real(row))
            ed_engs.append(c_ed.real(row))
            eu_engs.append(c_eu.real(row))
            e_flux.append(c_eflux.real(row))

        #
        else:

            # Add information
            ul_energies.append(c_energy.real(row))
            ul_flux.append(c_upper.real(row))
            ul_ed_engs.append(c_ed.real(row))
            ul_eu_engs.append(c_eu.real(row))

    # Create figure
    plt.figure()
    plt.title("Crab spectrum")

    # Plot the spectrum 
    plt.loglog()
    plt.grid()
    plt.errorbar(energies, flux, yerr=e_flux, xerr=[ed_engs, eu_engs], fmt='ro')
    plt.errorbar(ul_energies, ul_flux, xerr=[ul_ed_engs, ul_eu_engs], yerr=1.0e-11, uplims=True, fmt='ro')
    plt.xlabel("Energy (TeV)")
    plt.ylabel(r"dN/dE (erg cm$^{-2}$ s$^{-1}$)")  


    makeButterfly(cfg)
    
    ##################################################################
    ### Taken from $CTOOLS/share/examples/python/show_butterfly.py ###
    ##################################################################
    # Read given butterfly file    
    filename = cfg.getValue('ctbutterfly','output')
    csv      = gammalib.GCsv(filename)

    # Initialise arrays to be filled
    butterfly_x = []
    butterfly_y = []
    line_x      = []
    line_y      = []

    # Loop over rows of the file
    nrows = csv.nrows()
    for row in range(nrows):

        # Compute upper edge of confidence band
        butterfly_x.append(csv.real(row,0)*1.e-6) ## JLK MeV -> TeV
        #butterfly_y.append(csv.real(row,2)*1.e6) ## JLK MeV -> TeV
        scale = csv.real(row,0)*csv.real(row,0)*1.e-6*1.6
        butterfly_y.append(csv.real(row,2)*scale) ## JLK MeV -> TeV -> erg

        # Set line values
        line_x.append(csv.real(row,0)*1.e-6) ## JLK MeV -> TeV
        line_y.append(csv.real(row,1)*scale) ## JLK MeV -> TeV -> erg

    # Loop over the rows backwards to compute the lower edge
    # of the confidence band    
    for row in range(nrows):
        
        index = nrows - 1 - row
        butterfly_x.append(csv.real(index,0)*1.e-6) ## JLK MeV -> TeV
        scale = csv.real(index,0)*csv.real(index,0)*1.e-6*1.6
        low_error = csv.real(index,3)*scale ## JLK MeV -> TeV -> erg

        if low_error < 1e-26:
            low_error = 1e-26
        butterfly_y.append(low_error)   

    plt.fill(butterfly_x,butterfly_y,color='green',alpha=0.5)
    plt.plot(line_x,line_y,color='black',ls='-')

    plt.savefig(cfg.getValue('plots','spec_outfile'))
    #plt.show()
